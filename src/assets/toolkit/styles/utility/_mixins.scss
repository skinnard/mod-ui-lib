// *********************************************
// Rem output with px fallback
// *********************************************

/**
 * $size: Font-size to be converted from `px` to `rem`
 * $base: Base font-size (Change its value as per your need)
 * @return void
 */

@mixin font-size($value: 15) {
  font-size: $value * 1px;
  font-size: $value / 15 * 1rem;
}

// Mixin usage **************
// @include font-size(24);
// will output a font size of 1.5rem with 24px fallback

// *********************************************
// Centering
// *********************************************

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;

  @if $position == "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

// Mixin usage **************
// .foo {
//   @include center(both);
// }
// .foo-parent {
//   position: relative;
// }

// *********************************************
// Clearfix
// *********************************************

@mixin clearfix() {
  content: "";
  display: table;
  table-layout: fixed;
}

// *********************************************
// Clear after (not all clearfix need this also)
// *********************************************

@mixin clearfix-after() {
  clear: both;
}

// *********************************************
// Column width with margin
// *********************************************

@mixin column-width($numberColumns: 3) {
  width: map-get($columns, $numberColumns) -
    (($columns__margin * ($numberColumns - 1)) / $numberColumns);
}

// *********************************************
// Media Queries
// *********************************************

// Breakpoints
$breakpoint-xsmall: 400px;
$breakpoint-small: 767px;
$breakpoint-med: 960px;
$breakpoint-mdlg: 1024px;
$breakpoint-large: 1200px;
$breakpoint-xlarge: 1400px;

@mixin mq($size, $type: max, $pixels: $breakpoint-xsmall) {
  @if $size == "xsmall" {
    @media screen and ($type + -width: $breakpoint-xsmall) {
      @content;
    }
  } @else if $size == "small" {
    @media screen and ($type + -width: $breakpoint-small) {
      @content;
    }
  } @else if $size == "med" {
    @media screen and ($type + -width: $breakpoint-med) {
      @content;
    }
  } @else if $size == "mdlg" {
    @media screen and ($type + -width: $breakpoint-mdlg) {
      @content;
    }
  } @else if $size == "large" {
    @media screen and ($type + -width: $breakpoint-large) {
      @content;
    }
  } @else if $size == "xlarge" {
    @media screen and ($type + -width: $breakpoint-xlarge) {
      @content;
    }
  } @else if $size == "custom" {
    @media screen and ($type + -width: $pixels + px) {
      @content;
    }
  } @else {
    @content;
  }
}

// Mixin usage **************
//
// .foo {
// 	@include mq(large) {
// 	  width: 20%;
// 	}
// 	@include mq(med, max) {
// 	  width: 40%;
// 	}
// 	@include mq(med-small, min) {
// 	  width: 60%;
// 	}
// 	@include mq(small) {
// 	  width: 80%;
// 	}
// 	@include mq(custom, max, 400) {
// 	  width: 100%;
// 	}
// }

// *********************************************
// Animation
// *********************************************

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

// Mixin usage **************
// // Define animation name, and properties
// @include keyframes(fade-out) {
// 0% { opacity: 1; }
// 90% { opacity: 0; }
// }
// // Add animation to element
// .element {
// width: 100px;
// height: 100px;
// background: black;
// @include animation('fade-out 5s 3');

// *********************************************
// Animation
// *********************************************

@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(
      center,
      ellipse cover,
      $start-color,
      $end-color
    );
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Mixin usage **************
// //$start-color, $end-color, $orientation - vertical/horizontal/radial
// .foo {
//   @include background-gradient(red, black, 'vertical');
// }
// //Output
// .foo {
//   background: -webkit-linear-gradient(top, red, black);
//   background: linear-gradient(to bottom, red, black);
// }

// *********************************************
// Transitions
// *********************************************

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// Mixin usage **************
// a {
//   color: gray;
//   @include transition(color .3s ease);
//   &:hover {
//     color: black;
//   }
// }

// *********************************************
// Visually hide an element
// *********************************************

// When you hide an element with display: none, that prevents screen
// readers from reading it to the user. Sometimes that&rsquo;s fine,
// but in other cases this will make the site hard to use for
// people with screen readers. Thus, we have to use another technique
//  for hiding elements while at the same time make them accessible.

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// Mixin usage **************
// <button class="mobile-navigation-trigger">
//   <b class="visually-hidden">Open the navigation</b>
//   <img src="img/mobile-navigation-icon.svg">
// </button>
//
// .visually-hidden {
//   @extend %visuallyhidden;
// }

// Hide from both screen readers and browsers
@mixin hidden {
  display: none;
  visibility: hidden;
}

// *********************************************
// Pseudo Elements
// *********************************************

@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

// Mixin usage **************
// div::after {
//   @include pseudo;
//   top: -1rem;
//   left: -1rem;
//   width: 1rem;
//   height: 1rem;
// }

// *********************************************
// Font Awesome Mixin
// *********************************************

@mixin fa-icon($icon, $color: black, $size: 16px) {
  font-family: "Font Awesome 5 Free";
  content: "#{$icon}";
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: $color;
  font-size: $size;
  position: relative;
}

// Mixin usage **************
// div::before (or ::after) {
//   @include fa-icon("\f2a3", red, 30px);
// }

// *********************************************
// Backgrounds
// *********************************************

@mixin bg($url, $position) {
  background: url($url) no-repeat $position;
}

// Mixin usage **************
// .randon-div {
//   @include background('img/url.jpg', center);
//   background-size: cover;
// }

// *********************************************
// Default Animation Shortcut
// *********************************************

@mixin default-transition {
  transition: all 0.3s ease;
}

%section-padding {
  padding-top: 150px;

  @include mq(med, max) {
    padding-top: 100px;
  }

  @include mq(small, max) {
    padding-top: 60px;
  }
}

%section-padding-both {
  padding-top: 150px;
  padding-bottom: 150px;

  @include mq(med, max) {
    padding-top: 100px;
    padding-bottom: 100px;
  }

  @include mq(small, max) {
    padding-top: 60px;
    padding-bottom: 60px;
  }
}

%section-padding-both-no-hero {
  padding-top: 200px;
  padding-bottom: 150px;

  @include mq(med, max) {
    padding-top: 120px;
    padding-bottom: 60px;
  }

  @include mq(small, max) {
    padding-top: 80px;
    padding-bottom: 60px;
  }
}

%cta-section-padding {
  margin: 100px 0;

  @include mq(med, max) {
    margin: 60px auto 0;
  }
}

%last-section-padding {
  padding-bottom: 150px;

  @include mq(med, max) {
    padding-bottom: 100px;
  }

  @include mq(small, max) {
    padding-bottom: 60px;
  }
}

@mixin button {
  box-shadow: none !important;
  -webkit-box-shadow: none !important;
  text-transform: none !important;
  padding: 12px 40px 8px 40px;
  font-size: 15px;
  font-family: "Sailec-Bold";
  font-weight: normal;
  box-shadow: none;
  border-radius: 0;
  margin: 0;
  text-transform: none !important;
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
  vertical-align: middle;
  line-height: 24px;
  display: inline-block;
  cursor: pointer;
  border-radius: $br-sm !important;

  &:hover {
    color: #ffffff;
    background-color: $teal-hover;
    border: 2px solid $teal-hover;
  }
}

@mixin scrollStyle {
  scrollbar-width: thin;
  scrollbar-color: #16cd8a #f5f6fc;

  &::-webkit-scrollbar {
    width: 12px;
  }
  &::-webkit-scrollbar-track {
    background: #f5f6fc;
  }
  &::-webkit-scrollbar-thumb {
    background-color: #16cd8a;
    border-radius: 0;
    border: 4px solid #f5f6fc;
  }
}

@mixin sectionSpacing {
  margin: 0px auto 40px;

  @include mq(custom, max, 650) {
    margin: 0px auto 30px;
  }
}
